{
  "language": "bash",
  "code": "#!/bin/bash\n\necho \"=== Bash Advanced Features Test ===\"\n\n# Arrays\nnumbers=(1 2 3 4 5 6 7 8 9 10)\necho \"Numbers: ${numbers[*]}\"\n\n# Sum calculation\nsum=0\nfor num in \"${numbers[@]}\"; do\n    sum=$((sum + num))\ndone\necho \"Sum: $sum\"\n\n# Product calculation\nproduct=1\nfor num in \"${numbers[@]}\"; do\n    product=$((product * num))\ndone\necho \"Product: $product\"\n\n# String operations\necho \"\\nString Operations:\"\nmessage=\"Hello from Bash!\"\necho \"String: $message\"\necho \"Length: ${#message}\"\necho \"Uppercase: ${message^^}\"\necho \"Lowercase: ${message,,}\"\necho \"First 5 chars: ${message:0:5}\"\necho \"Last 5 chars: ${message: -5}\"\n\n# Math operations\necho \"\\nMath Operations:\"\necho \"Square root of 16: $(echo \"scale=2; sqrt(16)\" | bc)\"\necho \"2^10: $((2**10))\"\necho \"Random number: $RANDOM\"\necho \"Pi approximation: $(echo \"scale=6; 4*a(1)\" | bc -l)\"\n\n# Date and time\necho \"\\nDate and Time:\"\necho \"Current time: $(date)\"\necho \"ISO format: $(date -Iseconds)\"\necho \"Timestamp: $(date +%s)\"\necho \"Day of week: $(date +%A)\"\necho \"Month: $(date +%B)\"\n\n# File operations simulation\necho \"\\nFile Operations (simulated):\"\ntemp_data=\"Hello, this is temporary data!\"\necho \"Data to write: $temp_data\"\necho \"Data length: ${#temp_data} characters\"\necho \"Word count: $(echo \"$temp_data\" | wc -w)\"\necho \"Line count: $(echo \"$temp_data\" | wc -l)\"\n\n# Environment variables\necho \"\\nEnvironment Variables:\"\necho \"PWD: $PWD\"\necho \"USER: $USER\"\necho \"SHELL: $SHELL\"\necho \"PATH length: $(echo $PATH | tr ':' '\\n' | wc -l) directories\"\n\n# Functions\necho \"\\nFunctions:\"\ngreet() {\n    local name=\"$1\"\n    echo \"Hello, $name!\"\n}\n\ngreet \"World\"\n\n# Function with return value\ncalculate_square() {\n    local num=$1\n    echo $((num * num))\n}\n\nsquare_result=$(calculate_square 5)\necho \"Square of 5: $square_result\"\n\n# Error handling\necho \"\\nError Handling:\"\nset -e  # Exit on error\n\n# Test division\nresult=$((10 / 2))\necho \"Division result: $result\"\n\n# Test file existence (simulated)\nif [ -f \"/tmp/nonexistent\" ]; then\n    echo \"File exists\"\nelse\n    echo \"File does not exist (expected)\"\nfi\n\n# Arrays and loops\necho \"\\nArrays and Loops:\"\nfruits=(\"apple\" \"banana\" \"cherry\" \"date\")\necho \"Fruits: ${fruits[*]}\"\n\necho \"Looping through fruits:\"\nfor fruit in \"${fruits[@]}\"; do\n    echo \"  - $fruit\"\ndone\n\n# Associative arrays (Bash 4+)\necho \"\\nAssociative Arrays:\"\ndeclare -A person\nperson[\"name\"]=\"Alice\"\nperson[\"age\"]=\"30\"\nperson[\"city\"]=\"New York\"\n\necho \"Person: ${person[\"name\"]}, ${person[\"age\"]} years old\"\necho \"City: ${person[\"city\"]}\"\n\n# Command substitution\necho \"\\nCommand Substitution:\"\necho \"Current directory: $(pwd)\"\necho \"Files in current directory: $(ls | wc -l)\"\necho \"System uptime: $(uptime | cut -d',' -f1)\"\n\n# Process management\necho \"\\nProcess Information:\"\necho \"Current PID: $$\"\necho \"Parent PID: $PPID\"\necho \"Shell PID: $BASHPID\"\n\n# Regular expressions (using grep)\necho \"\\nRegular Expressions:\"\ntext=\"Hello World 123\"\necho \"Text: $text\"\necho \"Words: $(echo \"$text\" | grep -o '\\b\\w\\+\\b' | wc -l)\"\necho \"Numbers: $(echo \"$text\" | grep -o '[0-9]\\+' | wc -l)\"\n\n# Conditional statements\necho \"\\nConditional Statements:\"\n\nif [ $sum -gt 50 ]; then\n    echo \"Sum is greater than 50\"\nelse\n    echo \"Sum is less than or equal to 50\"\nfi\n\nif [ ${#message} -gt 10 ]; then\n    echo \"Message is longer than 10 characters\"\nelse\n    echo \"Message is 10 characters or shorter\"\nfi\n\n# Case statement\necho \"\\nCase Statement:\"\nfor fruit in \"${fruits[@]}\"; do\n    case $fruit in\n        \"apple\")\n            echo \"  $fruit: Red fruit\"\n            ;;\n        \"banana\")\n            echo \"  $fruit: Yellow fruit\"\n            ;;\n        \"cherry\")\n            echo \"  $fruit: Small red fruit\"\n            ;;\n        *)\n            echo \"  $fruit: Other fruit\"\n            ;;\n    esac\ndone\n\necho \"\\n=== Test completed successfully! ===\""
} 