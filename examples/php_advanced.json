{
  "language": "php",
  "code": "<?php\necho \"=== PHP Advanced Features Test ===\\n\";\n\n// Arrays and array functions\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$sum = array_sum($numbers);\n$product = array_reduce($numbers, function($carry, $item) { return $carry * $item; }, 1);\n$doubled = array_map(function($n) { return $n * 2; }, $numbers);\n$evens = array_filter($numbers, function($n) { return $n % 2 === 0; });\n\necho \"Numbers: \" . implode(', ', $numbers) . \"\\n\";\necho \"Sum: $sum\\n\";\necho \"Product: $product\\n\";\necho \"Doubled: \" . implode(', ', $doubled) . \"\\n\";\necho \"Evens: \" . implode(', ', $evens) . \"\\n\";\n\n// String operations\necho \"\\nString Operations:\\n\";\n$message = \"Hello from PHP!\";\necho \"String: $message\\n\";\necho \"Length: \" . strlen($message) . \"\\n\";\necho \"Uppercase: \" . strtoupper($message) . \"\\n\";\necho \"Reversed: \" . strrev($message) . \"\\n\";\necho \"Word count: \" . str_word_count($message) . \"\\n\";\n\n// Math functions\necho \"\\nMath Functions:\\n\";\necho \"π ≈ \" . M_PI . \"\\n\";\necho \"e ≈ \" . M_E . \"\\n\";\necho \"√16 = \" . sqrt(16) . \"\\n\";\necho \"2^10 = \" . pow(2, 10) . \"\\n\";\necho \"Random: \" . rand(1, 100) . \"\\n\";\necho \"Ceil(3.7): \" . ceil(3.7) . \"\\n\";\necho \"Floor(3.7): \" . floor(3.7) . \"\\n\";\n\n// Date and time\necho \"\\nDate and Time:\\n\";\n$now = new DateTime();\necho \"Current time: \" . $now->format('Y-m-d H:i:s') . \"\\n\";\necho \"ISO format: \" . $now->format('c') . \"\\n\";\necho \"Timestamp: \" . time() . \"\\n\";\n\n// Associative arrays\necho \"\\nAssociative Arrays:\\n\";\n$person = [\n    'name' => 'Alice',\n    'age' => 30,\n    'city' => 'New York',\n    'skills' => ['PHP', 'JavaScript', 'Python']\n];\n\necho \"Person: {$person['name']}, {$person['age']} years old\\n\";\necho \"Skills: \" . implode(', ', $person['skills']) . \"\\n\";\n\n// Array destructuring (PHP 7.1+)\n[$first, $second] = $numbers;\necho \"First: $first, Second: $second\\n\";\n\n// Error handling\necho \"\\nError Handling:\\n\";\ntry {\n    $result = 10 / 2;\n    echo \"Division result: $result\\n\";\n    \n    // Simulate an error\n    if (false) {\n        throw new Exception(\"This is a test error\");\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage() . \"\\n\";\n}\n\n// File operations simulation\necho \"\\nFile Operations (simulated):\\n\";\n$temp_data = \"Hello, this is temporary data!\";\necho \"Data to write: $temp_data\\n\";\necho \"Data length: \" . strlen($temp_data) . \" bytes\\n\";\n\n// Regular expressions\necho \"\\nRegular Expressions:\\n\";\n$text = \"Hello World 123\";\necho \"Text: $text\\n\";\necho \"Words: \" . preg_match_all('/\\b\\w+\\b/', $text, $matches) . \"\\n\";\necho \"Numbers: \" . preg_match_all('/\\d+/', $text, $matches) . \"\\n\";\n\n// Functions and closures\necho \"\\nFunctions and Closures:\\n\";\n$greet = function($name) {\n    return \"Hello, $name!\";\n};\n\necho $greet('World') . \"\\n\";\n\necho \"\\n=== Test completed successfully! ===\\n\";\n?>"
} 