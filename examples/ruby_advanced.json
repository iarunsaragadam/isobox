{
  "language": "ruby",
  "code": "puts \"=== Ruby Advanced Features Test ===\"\n\n# Arrays and enumerable methods\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum = numbers.sum\nproduct = numbers.reduce(:*)\ndoubled = numbers.map { |n| n * 2 }\nevens = numbers.select { |n| n.even? }\n\nputs \"Numbers: #{numbers.join(', ')}\"\nputs \"Sum: #{sum}\"\nputs \"Product: #{product}\"\nputs \"Doubled: #{doubled.join(', ')}\"\nputs \"Evens: #{evens.join(', ')}\"\n\n# String operations\nputs \"\\nString Operations:\"\nmessage = \"Hello from Ruby!\"\nputs \"String: #{message}\"\nputs \"Length: #{message.length}\"\nputs \"Uppercase: #{message.upcase}\"\nputs \"Reversed: #{message.reverse}\"\nputs \"Words: #{message.split(' ').length}\"\nputs \"Characters: #{message.chars.join(', ')}\"\n\n# Math operations\nputs \"\\nMath Operations:\"\nputs \"π ≈ #{Math::PI}\"\nputs \"e ≈ #{Math::E}\"\nputs \"√16 = #{Math.sqrt(16)}\"\nputs \"2^10 = #{2**10}\"\nputs \"Random: #{rand(1..100)}\"\nputs \"Ceil(3.7): #{3.7.ceil}\"\nputs \"Floor(3.7): #{3.7.floor}\"\n\n# Date and time\nputs \"\\nDate and Time:\"\nnow = Time.now\nputs \"Current time: #{now}\"\nputs \"ISO format: #{now.iso8601}\"\nputs \"Formatted: #{now.strftime('%Y-%m-%d %H:%M:%S')}\"\nputs \"Day of week: #{now.strftime('%A')}\"\n\n# Hashes and symbols\nputs \"\\nHashes and Symbols:\"\nperson = {\n  name: 'Alice',\n  age: 30,\n  city: 'New York',\n  skills: ['Ruby', 'Python', 'JavaScript']\n}\n\nputs \"Person: #{person[:name]}, #{person[:age]} years old\"\nputs \"Skills: #{person[:skills].join(', ')}\"\nputs \"Keys: #{person.keys.join(', ')}\"\nputs \"Values: #{person.values.join(', ')}\"\n\n# Array destructuring\nputs \"\\nArray Destructuring:\"\nfirst, second, *rest = numbers\nputs \"First: #{first}, Second: #{second}, Rest: #{rest.join(', ')}\"\n\n# Blocks and procs\nputs \"\\nBlocks and Procs:\"\ngreet = ->(name) { \"Hello, #{name}!\" }\nputs greet.call('World')\n\n# Yield with blocks\n5.times { |i| puts \"  Iteration #{i + 1}\" }\n\n# Error handling\nputs \"\\nError Handling:\"\nbegin\n  result = 10 / 2\n  puts \"Division result: #{result}\"\n  \n  # Simulate an error\n  raise \"This is a test error\" if false\nrescue => e\n  puts \"Error: #{e.message}\"\nend\n\n# File operations simulation\nputs \"\\nFile Operations (simulated):\"\ntemp_data = \"Hello, this is temporary data!\"\nputs \"Data to write: #{temp_data}\"\nputs \"Data length: #{temp_data.bytesize} bytes\"\nputs \"Lines: #{temp_data.lines.count}\"\n\n# Regular expressions\nputs \"\\nRegular Expressions:\"\ntext = \"Hello World 123\"\nputs \"Text: #{text}\"\nputs \"Words: #{text.scan(/\\b\\w+\\b/).length}\"\nputs \"Numbers: #{text.scan(/\\d+/).length}\"\nputs \"Matches: #{text.scan(/\\w+/).join(', ')}\"\n\n# Classes and objects\nputs \"\\nClasses and Objects:\"\nclass Calculator\n  def initialize\n    @history = []\n  end\n  \n  def add(a, b)\n    result = a + b\n    @history << \"#{a} + #{b} = #{result}\"\n    result\n  end\n  \n  def history\n    @history\n  end\nend\n\ncalc = Calculator.new\nputs \"5 + 3 = #{calc.add(5, 3)}\"\nputs \"10 + 7 = #{calc.add(10, 7)}\"\nputs \"History: #{calc.history.join(', ')}\"\n\n# Modules and mixins\nputs \"\\nModules and Mixins:\"\nmodule MathUtils\n  def square(x)\n    x ** 2\n  end\n  \n  def cube(x)\n    x ** 3\n  end\nend\n\nclass NumberProcessor\n  include MathUtils\nend\n\nprocessor = NumberProcessor.new\nputs \"Square of 5: #{processor.square(5)}\"\nputs \"Cube of 3: #{processor.cube(3)}\"\n\nputs \"\\n=== Test completed successfully! ===\""
} 